{"ast":null,"code":"import _regeneratorRuntime from\"/Users/fc/Downloads/Block chain/aqua-wallet/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";import _asyncToGenerator from\"/Users/fc/Downloads/Block chain/aqua-wallet/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";import{ethers}from'ethers';import{CHAINS_CONFIG,goerli}from'../models/Chain';export function sendToken(_x,_x2,_x3,_x4){return _sendToken.apply(this,arguments);}function _sendToken(){_sendToken=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee(amount,from,to,privateKey){var chain,provider,wallet,tx,transaction,receipt;return _regeneratorRuntime().wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:chain=CHAINS_CONFIG[goerli.chainId];// Create a provider using the Infura RPC URL for Goerli\nprovider=new ethers.providers.JsonRpcProvider(chain.rpcUrl);// Create a wallet instance from the sender's private key\nwallet=new ethers.Wallet(privateKey,provider);// Construct the transaction object\ntx={to:to,value:ethers.utils.parseEther(amount.toString())};// Sign the transaction with the sender's wallet\n_context.next=6;return wallet.sendTransaction(tx);case 6:transaction=_context.sent;_context.next=9;return transaction.wait();case 9:receipt=_context.sent;return _context.abrupt(\"return\",{transaction:transaction,receipt:receipt});case 11:case\"end\":return _context.stop();}}},_callee);}));return _sendToken.apply(this,arguments);}","map":{"version":3,"names":["ethers","CHAINS_CONFIG","goerli","sendToken","amount","from","to","privateKey","chain","chainId","provider","providers","JsonRpcProvider","rpcUrl","wallet","Wallet","tx","value","utils","parseEther","toString","sendTransaction","transaction","wait","receipt"],"sources":["/Users/fc/Downloads/Block chain/aqua-wallet/src/utils/TransactionUtils.ts"],"sourcesContent":["import { ethers, Wallet } from 'ethers';\nimport { CHAINS_CONFIG, goerli } from '../models/Chain';\n\nexport async function sendToken(\n  amount: number,\n  from: string,\n  to: string,\n  privateKey: string,\n) {\n\n  const chain = CHAINS_CONFIG[goerli.chainId];\n\n  // Create a provider using the Infura RPC URL for Goerli\n  const provider = new ethers.providers.JsonRpcProvider(chain.rpcUrl);\n\n  // Create a wallet instance from the sender's private key\n  const wallet: Wallet = new ethers.Wallet(privateKey, provider);\n\n  // Construct the transaction object\n  const tx = {\n    to,\n    value: ethers.utils.parseEther(amount.toString()),\n  };\n\n  // Sign the transaction with the sender's wallet\n  const transaction = await wallet.sendTransaction(tx);\n\n  // Wait for the transaction to be mined\n  const receipt = await transaction.wait();\n\n  return {transaction, receipt};\n}\n"],"mappings":"kRAAA,OAASA,MAAM,KAAgB,QAAQ,CACvC,OAASC,aAAa,CAAEC,MAAM,KAAQ,iBAAiB,CAEvD,eAAsBC,UAAS,0DA4B9B,2FA5BM,iBACLC,MAAc,CACdC,IAAY,CACZC,EAAU,CACVC,UAAkB,qKAGZC,KAAK,CAAGP,aAAa,CAACC,MAAM,CAACO,OAAO,CAAC,CAE3C;AACMC,QAAQ,CAAG,GAAIV,OAAM,CAACW,SAAS,CAACC,eAAe,CAACJ,KAAK,CAACK,MAAM,CAAC,CAEnE;AACMC,MAAc,CAAG,GAAId,OAAM,CAACe,MAAM,CAACR,UAAU,CAAEG,QAAQ,CAAC,CAE9D;AACMM,EAAE,CAAG,CACTV,EAAE,CAAFA,EAAE,CACFW,KAAK,CAAEjB,MAAM,CAACkB,KAAK,CAACC,UAAU,CAACf,MAAM,CAACgB,QAAQ,EAAE,CAClD,CAAC,CAED;AAAA,sBAC0BN,OAAM,CAACO,eAAe,CAACL,EAAE,CAAC,QAA9CM,WAAW,qCAGKA,YAAW,CAACC,IAAI,EAAE,QAAlCC,OAAO,+CAEN,CAACF,WAAW,CAAXA,WAAW,CAAEE,OAAO,CAAPA,OAAO,CAAC,yDAC9B"},"metadata":{},"sourceType":"module","externalDependencies":[]}