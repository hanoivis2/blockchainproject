{"ast":null,"code":"import { ethers } from 'ethers';\nimport { CHAINS_CONFIG, goerli } from '../models/Chain';\nexport async function sendToken(amount, from, to, privateKey) {\n  const chain = CHAINS_CONFIG[goerli.chainId];\n\n  // Create a provider using the Infura RPC URL for Goerli\n  const provider = new ethers.providers.JsonRpcProvider(chain.rpcUrl);\n\n  // Create a wallet instance from the sender's private key\n  const wallet = new ethers.Wallet(privateKey, provider);\n\n  // Construct the transaction object\n  const tx = {\n    to,\n    value: ethers.utils.parseEther(amount.toString())\n  };\n\n  // Sign the transaction with the sender's wallet\n  const transaction = await wallet.sendTransaction(tx);\n\n  // Wait for the transaction to be mined\n  const receipt = await transaction.wait();\n  return {\n    transaction,\n    receipt\n  };\n}","map":{"version":3,"names":["ethers","CHAINS_CONFIG","goerli","sendToken","amount","from","to","privateKey","chain","chainId","provider","providers","JsonRpcProvider","rpcUrl","wallet","Wallet","tx","value","utils","parseEther","toString","transaction","sendTransaction","receipt","wait"],"sources":["/Users/fc/Downloads/Block chain/aquawallet/src/utils/TransactionUtils.ts"],"sourcesContent":["import { ethers, Wallet } from 'ethers';\nimport { CHAINS_CONFIG, goerli } from '../models/Chain';\n\nexport async function sendToken(\n  amount: number,\n  from: string,\n  to: string,\n  privateKey: string,\n) {\n\n  const chain = CHAINS_CONFIG[goerli.chainId];\n\n  // Create a provider using the Infura RPC URL for Goerli\n  const provider = new ethers.providers.JsonRpcProvider(chain.rpcUrl);\n\n  // Create a wallet instance from the sender's private key\n  const wallet: Wallet = new ethers.Wallet(privateKey, provider);\n\n  // Construct the transaction object\n  const tx = {\n    to,\n    value: ethers.utils.parseEther(amount.toString()),\n  };\n\n  // Sign the transaction with the sender's wallet\n  const transaction = await wallet.sendTransaction(tx);\n\n  // Wait for the transaction to be mined\n  const receipt = await transaction.wait();\n\n  return {transaction, receipt};\n}\n"],"mappings":"AAAA,SAASA,MAAM,QAAgB,QAAQ;AACvC,SAASC,aAAa,EAAEC,MAAM,QAAQ,iBAAiB;AAEvD,OAAO,eAAeC,SAAS,CAC7BC,MAAc,EACdC,IAAY,EACZC,EAAU,EACVC,UAAkB,EAClB;EAEA,MAAMC,KAAK,GAAGP,aAAa,CAACC,MAAM,CAACO,OAAO,CAAC;;EAE3C;EACA,MAAMC,QAAQ,GAAG,IAAIV,MAAM,CAACW,SAAS,CAACC,eAAe,CAACJ,KAAK,CAACK,MAAM,CAAC;;EAEnE;EACA,MAAMC,MAAc,GAAG,IAAId,MAAM,CAACe,MAAM,CAACR,UAAU,EAAEG,QAAQ,CAAC;;EAE9D;EACA,MAAMM,EAAE,GAAG;IACTV,EAAE;IACFW,KAAK,EAAEjB,MAAM,CAACkB,KAAK,CAACC,UAAU,CAACf,MAAM,CAACgB,QAAQ,EAAE;EAClD,CAAC;;EAED;EACA,MAAMC,WAAW,GAAG,MAAMP,MAAM,CAACQ,eAAe,CAACN,EAAE,CAAC;;EAEpD;EACA,MAAMO,OAAO,GAAG,MAAMF,WAAW,CAACG,IAAI,EAAE;EAExC,OAAO;IAACH,WAAW;IAAEE;EAAO,CAAC;AAC/B"},"metadata":{},"sourceType":"module","externalDependencies":[]}