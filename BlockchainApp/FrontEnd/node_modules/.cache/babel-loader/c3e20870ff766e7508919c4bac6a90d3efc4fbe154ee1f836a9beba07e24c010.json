{"ast":null,"code":"import{Wallet}from'ethers';export function generateAccount(){var seedPhrase=arguments.length>0&&arguments[0]!==undefined?arguments[0]:\"\";var index=arguments.length>1&&arguments[1]!==undefined?arguments[1]:0;var wallet;// If the seed phrase is not provided, generate a random mnemonic using a CSPRNG\nif(seedPhrase===\"\"){seedPhrase=Wallet.createRandom().mnemonic.phrase;}// If the seed phrase does not contain spaces, it is likely a mnemonic\nwallet=seedPhrase.includes(\" \")?Wallet.fromMnemonic(seedPhrase,\"m/44'/60'/0'/0/\".concat(index)):new Wallet(seedPhrase);var _wallet=wallet,address=_wallet.address;var account={address:address,privateKey:wallet.privateKey,balance:\"0\"};// If the seedphrase does not include spaces then it's actually a private key, so return a blank string.\nreturn{account:account,seedPhrase:seedPhrase.includes(\" \")?seedPhrase:\"\"};}export function shortenAddress(str){var numChars=arguments.length>1&&arguments[1]!==undefined?arguments[1]:4;return\"\".concat(str.substring(0,numChars),\"...\").concat(str.substring(str.length-numChars));}export function toFixedIfNecessary(value){var decimalPlaces=arguments.length>1&&arguments[1]!==undefined?arguments[1]:2;return+parseFloat(value).toFixed(decimalPlaces);}","map":{"version":3,"names":["Wallet","generateAccount","seedPhrase","index","wallet","createRandom","mnemonic","phrase","includes","fromMnemonic","address","account","privateKey","balance","shortenAddress","str","numChars","substring","length","toFixedIfNecessary","value","decimalPlaces","parseFloat","toFixed"],"sources":["/Users/fc/Downloads/Block chain/aqua-wallet/src/utils/AccountUtils.ts"],"sourcesContent":["import { Wallet } from 'ethers';\nimport { Account } from '../models/Account';\n\nexport function generateAccount(seedPhrase: string = \"\", index: number = 0): \n{ account: Account, seedPhrase: string } {\n  let wallet: Wallet;\n\n  // If the seed phrase is not provided, generate a random mnemonic using a CSPRNG\n  if (seedPhrase === \"\") {\n    seedPhrase = Wallet.createRandom().mnemonic.phrase;\n  }\n\n  // If the seed phrase does not contain spaces, it is likely a mnemonic\n  wallet = (seedPhrase.includes(\" \")) ? Wallet.fromMnemonic(seedPhrase, `m/44'/60'/0'/0/${index}`) : \n  new Wallet(seedPhrase);\n\n  const { address } = wallet;\n  const account = { address, privateKey: wallet.privateKey, balance: \"0\" };\n  \n  // If the seedphrase does not include spaces then it's actually a private key, so return a blank string.\n  return { account, seedPhrase: seedPhrase.includes(\" \")? seedPhrase : \"\" };\n}\n\nexport function shortenAddress(str: string, numChars: number=4) {\n  return `${str.substring(0, numChars)}...${str.substring(str.length - numChars)}`;\n}\n\nexport function toFixedIfNecessary( value: string, decimalPlaces: number = 2 ){\n  return +parseFloat(value).toFixed( decimalPlaces );\n}"],"mappings":"AAAA,OAASA,MAAM,KAAQ,QAAQ,CAG/B,MAAO,SAASC,gBAAe,EACU,IADTC,WAAkB,2DAAG,EAAE,IAAEC,MAAa,2DAAG,CAAC,CAExE,GAAIC,OAAc,CAElB;AACA,GAAIF,UAAU,GAAK,EAAE,CAAE,CACrBA,UAAU,CAAGF,MAAM,CAACK,YAAY,EAAE,CAACC,QAAQ,CAACC,MAAM,CACpD,CAEA;AACAH,MAAM,CAAIF,UAAU,CAACM,QAAQ,CAAC,GAAG,CAAC,CAAIR,MAAM,CAACS,YAAY,CAACP,UAAU,0BAAoBC,KAAK,EAAG,CAChG,GAAIH,OAAM,CAACE,UAAU,CAAC,CAEtB,YAAoBE,MAAM,CAAlBM,OAAO,SAAPA,OAAO,CACf,GAAMC,QAAO,CAAG,CAAED,OAAO,CAAPA,OAAO,CAAEE,UAAU,CAAER,MAAM,CAACQ,UAAU,CAAEC,OAAO,CAAE,GAAI,CAAC,CAExE;AACA,MAAO,CAAEF,OAAO,CAAPA,OAAO,CAAET,UAAU,CAAEA,UAAU,CAACM,QAAQ,CAAC,GAAG,CAAC,CAAEN,UAAU,CAAG,EAAG,CAAC,CAC3E,CAEA,MAAO,SAASY,eAAc,CAACC,GAAW,CAAsB,IAApBC,SAAgB,2DAAC,CAAC,CAC5D,gBAAUD,GAAG,CAACE,SAAS,CAAC,CAAC,CAAED,QAAQ,CAAC,eAAMD,GAAG,CAACE,SAAS,CAACF,GAAG,CAACG,MAAM,CAAGF,QAAQ,CAAC,EAChF,CAEA,MAAO,SAASG,mBAAkB,CAAEC,KAAa,CAA6B,IAA3BC,cAAqB,2DAAG,CAAC,CAC1E,MAAO,CAACC,UAAU,CAACF,KAAK,CAAC,CAACG,OAAO,CAAEF,aAAa,CAAE,CACpD"},"metadata":{},"sourceType":"module","externalDependencies":[]}