{"ast":null,"code":"var _jsxFileName = \"/Users/fc/Downloads/Block chain/aqua-wallet/src/scenes/Account/AccountCreate.tsx\",\n  _s = $RefreshSig$();\nimport React, { useCallback, useEffect, useState } from 'react';\nimport { generateAccount } from '../../utils/AccountUtils';\nimport AccountDetail from './AccountDetail';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst recoveryPhraseKeyName = 'recoveryPhrase';\nfunction AccountCreate() {\n  _s();\n  // Declare a new state variable, which we'll call \"seedphrase\"\n  const [seedphrase, setSeedphrase] = useState('');\n\n  // Declare a new state variable, which we'll call \"account\"\n  const [account, setAccount] = useState(null);\n\n  // Declare a new state variable, which we'll call \"showRecoverInput\"\n  // and initialize it to false\n  const [showRecoverInput, setShowRecoverInput] = useState(false);\n  function handleChange(event) {\n    // Update the seedphrase state with the value from the text input\n    setSeedphrase(event.target.value);\n  }\n  const handleKeyDown = async event => {\n    if (event.keyCode === 13) {\n      event.preventDefault();\n      recoverAccount(seedphrase);\n    }\n  };\n  const recoverAccount = useCallback(\n  // recoverAccount could be used without recoveryPhrase as an arguement but then we would have to\n  // put it in a deps array.\n  async recoveryPhrase => {\n    // Call the generateAccount function with no arguments\n    // Call the generateAccount function and pass it 0 and the current seedphrase\n    const result = await generateAccount(recoveryPhrase);\n\n    // Update the account state with the newly recovered account\n    setAccount(result.account);\n    if (localStorage.getItem(recoveryPhraseKeyName) !== recoveryPhrase) {\n      localStorage.setItem(recoveryPhraseKeyName, recoveryPhrase);\n    }\n  }, []);\n  useEffect(() => {\n    const localStorageRecoveryPhrase = localStorage.getItem(recoveryPhraseKeyName);\n    if (localStorageRecoveryPhrase) {\n      setSeedphrase(localStorageRecoveryPhrase);\n      recoverAccount(localStorageRecoveryPhrase);\n    }\n  }, [recoverAccount]);\n  async function createAccount() {\n    // Call the generateAccount function with no arguments\n    const result = await generateAccount();\n\n    // Update the account state with the newly created account\n    setAccount(result.account);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"AccountCreate p-5 m-3 card shadow\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Aqua Wallet\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: event => event.preventDefault(),\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"button\",\n        className: \"btn btn-primary\",\n        onClick: createAccount,\n        children: \"Create Account\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"button\",\n        className: \"btn btn-outline-primary ml-3\",\n        onClick: () => showRecoverInput ? recoverAccount(seedphrase) : setShowRecoverInput(true)\n        // if the recoveryinput is showing but there is no seedphrase, disable the ability to recover account\n        ,\n        disabled: showRecoverInput && !seedphrase,\n        children: \"Recover account\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 9\n      }, this), showRecoverInput && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form-group mt-3\",\n        children: /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          placeholder: \"Seedphrase or private key for recovery\",\n          className: \"form-control\",\n          value: seedphrase,\n          onChange: handleChange,\n          onKeyDown: handleKeyDown\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 7\n    }, this), account && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(AccountDetail, {\n        account: account\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 68,\n    columnNumber: 5\n  }, this);\n}\n_s(AccountCreate, \"mAA2FZrxaFfE01zQF7v+zpn7Hf8=\");\n_c = AccountCreate;\nexport default AccountCreate;\nvar _c;\n$RefreshReg$(_c, \"AccountCreate\");","map":{"version":3,"names":["React","useCallback","useEffect","useState","generateAccount","AccountDetail","recoveryPhraseKeyName","AccountCreate","seedphrase","setSeedphrase","account","setAccount","showRecoverInput","setShowRecoverInput","handleChange","event","target","value","handleKeyDown","keyCode","preventDefault","recoverAccount","recoveryPhrase","result","localStorage","getItem","setItem","localStorageRecoveryPhrase","createAccount"],"sources":["/Users/fc/Downloads/Block chain/aqua-wallet/src/scenes/Account/AccountCreate.tsx"],"sourcesContent":["import React, { useCallback, useEffect, useState } from 'react';\nimport { generateAccount } from '../../utils/AccountUtils';\nimport { Account } from '../../models/Account';\nimport AccountDetail from './AccountDetail';\n\nconst recoveryPhraseKeyName = 'recoveryPhrase';\n\nfunction AccountCreate() {\n  // Declare a new state variable, which we'll call \"seedphrase\"\n  const [seedphrase, setSeedphrase] = useState('');\n\n  // Declare a new state variable, which we'll call \"account\"\n  const [account, setAccount] = useState<Account | null>(null);\n\n  // Declare a new state variable, which we'll call \"showRecoverInput\"\n  // and initialize it to false\n  const [showRecoverInput, setShowRecoverInput] = useState(false);\n\n  function handleChange(event: React.ChangeEvent<HTMLInputElement>) {\n    // Update the seedphrase state with the value from the text input\n    setSeedphrase(event.target.value);\n  }\n\n  const handleKeyDown = async (event: React.KeyboardEvent<HTMLInputElement>) => {\n    if (event.keyCode === 13) {\n      event.preventDefault();\n      recoverAccount(seedphrase);\n    }\n  }\n\n  const recoverAccount = useCallback(\n    // recoverAccount could be used without recoveryPhrase as an arguement but then we would have to\n    // put it in a deps array.\n    async (recoveryPhrase: string) => {\n\n      // Call the generateAccount function with no arguments\n      // Call the generateAccount function and pass it 0 and the current seedphrase\n      const result = await generateAccount(recoveryPhrase);\n\n      // Update the account state with the newly recovered account\n      setAccount(result.account);\n\n      if (localStorage.getItem(recoveryPhraseKeyName) !== recoveryPhrase) {\n        localStorage.setItem(recoveryPhraseKeyName, recoveryPhrase);\n      }\n\n    }, []\n  );\n\n  useEffect(() => {\n\n    const localStorageRecoveryPhrase = localStorage.getItem(recoveryPhraseKeyName)\n    if (localStorageRecoveryPhrase) {\n      setSeedphrase(localStorageRecoveryPhrase);\n      recoverAccount(localStorageRecoveryPhrase);\n    }\n  }, [recoverAccount])\n\n  async function createAccount() {\n    // Call the generateAccount function with no arguments\n    const result = await generateAccount();\n\n    // Update the account state with the newly created account\n    setAccount(result.account);\n  }\n\n  return (\n    <div className='AccountCreate p-5 m-3 card shadow'>\n      <h1>\n        Aqua Wallet\n      </h1>\n      <form onSubmit={event => event.preventDefault()}>\n        <button type=\"button\" className=\"btn btn-primary\" onClick={createAccount}>\n          Create Account\n        </button>\n        {/* Add a button to toggle showing the recover account input and button */}\n        {/* If show recover input is visible, clicking the button again will submit the phrase in the input */}\n        <button type=\"button\" className=\"btn btn-outline-primary ml-3\"\n          onClick={() => showRecoverInput ? recoverAccount(seedphrase) : setShowRecoverInput(true)}\n          // if the recoveryinput is showing but there is no seedphrase, disable the ability to recover account\n          disabled={showRecoverInput && !seedphrase}\n        >\n          Recover account\n        </button>\n        {/* Show the recover account input and button if showRecoverInput is true */}\n        {showRecoverInput && (\n          <div className=\"form-group mt-3\">\n            <input type=\"text\" placeholder='Seedphrase or private key for recovery' className=\"form-control\"\n              value={seedphrase} onChange={handleChange} onKeyDown={handleKeyDown} />\n          </div>\n        )}\n      </form>\n      {account &&\n        <>\n          <hr />\n          <AccountDetail account={account} />\n        </>\n      }\n    </div>\n  )\n\n}\nexport default AccountCreate;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}