{"ast":null,"code":"import { Wallet } from 'ethers';\nexport function generateAccount() {\n  let seedPhrase = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"\";\n  let index = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  let wallet;\n\n  // If the seed phrase is not provided, generate a random mnemonic using a CSPRNG\n  if (seedPhrase === \"\") {\n    seedPhrase = Wallet.createRandom().mnemonic.phrase;\n  }\n\n  // If the seed phrase does not contain spaces, it is likely a mnemonic\n  wallet = seedPhrase.includes(\" \") ? Wallet.fromMnemonic(seedPhrase, `m/44'/60'/0'/0/${index}`) : new Wallet(seedPhrase);\n  const {\n    address\n  } = wallet;\n  const account = {\n    address,\n    privateKey: wallet.privateKey,\n    balance: \"0\"\n  };\n\n  // If the seedphrase does not include spaces then it's actually a private key, so return a blank string.\n  return {\n    account,\n    seedPhrase: seedPhrase.includes(\" \") ? seedPhrase : \"\"\n  };\n}\nexport function shortenAddress(str) {\n  let numChars = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 4;\n  return `${str.substring(0, numChars)}...${str.substring(str.length - numChars)}`;\n}\nexport function toFixedIfNecessary(value) {\n  let decimalPlaces = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 2;\n  return +parseFloat(value).toFixed(decimalPlaces);\n}","map":{"version":3,"names":["Wallet","generateAccount","seedPhrase","index","wallet","createRandom","mnemonic","phrase","includes","fromMnemonic","address","account","privateKey","balance","shortenAddress","str","numChars","substring","length","toFixedIfNecessary","value","decimalPlaces","parseFloat","toFixed"],"sources":["/Users/fc/Downloads/Block chain/aqua-wallet/src/utils/AccountUtils.ts"],"sourcesContent":["import { Wallet } from 'ethers';\nimport { Account } from '../models/Account';\n\nexport function generateAccount(seedPhrase: string = \"\", index: number = 0): \n{ account: Account, seedPhrase: string } {\n  let wallet: Wallet;\n\n  // If the seed phrase is not provided, generate a random mnemonic using a CSPRNG\n  if (seedPhrase === \"\") {\n    seedPhrase = Wallet.createRandom().mnemonic.phrase;\n  }\n\n  // If the seed phrase does not contain spaces, it is likely a mnemonic\n  wallet = (seedPhrase.includes(\" \")) ? Wallet.fromMnemonic(seedPhrase, `m/44'/60'/0'/0/${index}`) : \n  new Wallet(seedPhrase);\n\n  const { address } = wallet;\n  const account = { address, privateKey: wallet.privateKey, balance: \"0\" };\n  \n  // If the seedphrase does not include spaces then it's actually a private key, so return a blank string.\n  return { account, seedPhrase: seedPhrase.includes(\" \")? seedPhrase : \"\" };\n}\n\nexport function shortenAddress(str: string, numChars: number=4) {\n  return `${str.substring(0, numChars)}...${str.substring(str.length - numChars)}`;\n}\n\nexport function toFixedIfNecessary( value: string, decimalPlaces: number = 2 ){\n  return +parseFloat(value).toFixed( decimalPlaces );\n}"],"mappings":"AAAA,SAASA,MAAM,QAAQ,QAAQ;AAG/B,OAAO,SAASC,eAAe,GACU;EAAA,IADTC,UAAkB,uEAAG,EAAE;EAAA,IAAEC,KAAa,uEAAG,CAAC;EAExE,IAAIC,MAAc;;EAElB;EACA,IAAIF,UAAU,KAAK,EAAE,EAAE;IACrBA,UAAU,GAAGF,MAAM,CAACK,YAAY,EAAE,CAACC,QAAQ,CAACC,MAAM;EACpD;;EAEA;EACAH,MAAM,GAAIF,UAAU,CAACM,QAAQ,CAAC,GAAG,CAAC,GAAIR,MAAM,CAACS,YAAY,CAACP,UAAU,EAAG,kBAAiBC,KAAM,EAAC,CAAC,GAChG,IAAIH,MAAM,CAACE,UAAU,CAAC;EAEtB,MAAM;IAAEQ;EAAQ,CAAC,GAAGN,MAAM;EAC1B,MAAMO,OAAO,GAAG;IAAED,OAAO;IAAEE,UAAU,EAAER,MAAM,CAACQ,UAAU;IAAEC,OAAO,EAAE;EAAI,CAAC;;EAExE;EACA,OAAO;IAAEF,OAAO;IAAET,UAAU,EAAEA,UAAU,CAACM,QAAQ,CAAC,GAAG,CAAC,GAAEN,UAAU,GAAG;EAAG,CAAC;AAC3E;AAEA,OAAO,SAASY,cAAc,CAACC,GAAW,EAAsB;EAAA,IAApBC,QAAgB,uEAAC,CAAC;EAC5D,OAAQ,GAAED,GAAG,CAACE,SAAS,CAAC,CAAC,EAAED,QAAQ,CAAE,MAAKD,GAAG,CAACE,SAAS,CAACF,GAAG,CAACG,MAAM,GAAGF,QAAQ,CAAE,EAAC;AAClF;AAEA,OAAO,SAASG,kBAAkB,CAAEC,KAAa,EAA6B;EAAA,IAA3BC,aAAqB,uEAAG,CAAC;EAC1E,OAAO,CAACC,UAAU,CAACF,KAAK,CAAC,CAACG,OAAO,CAAEF,aAAa,CAAE;AACpD"},"metadata":{},"sourceType":"module","externalDependencies":[]}