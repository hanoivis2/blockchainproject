{"ast":null,"code":"var _jsxFileName = \"/Users/fc/Downloads/Block chain/aquawallet/src/scenes/Account/AccountDetail.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { sendToken } from '../../utils/TransactionUtils';\nimport { goerli } from '../../models/Chain';\nimport AccountTransactions from './AccountTransactions';\nimport { ethers } from 'ethers';\nimport { toFixedIfNecessary } from '../../utils/AccountUtils';\nimport './Account.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst AccountDetail = _ref => {\n  _s();\n  let {\n    account\n  } = _ref;\n  const [destinationAddress, setDestinationAddress] = useState('');\n  const [amount, setAmount] = useState(0);\n  const [balance, setBalance] = useState(account.balance);\n  const [networkResponse, setNetworkResponse] = useState({\n    status: null,\n    message: ''\n  });\n  useEffect(() => {\n    const fetchData = async () => {\n      const provider = new ethers.providers.JsonRpcProvider(goerli.rpcUrl);\n      let accountBalance = await provider.getBalance(account.address);\n      setBalance(String(toFixedIfNecessary(ethers.utils.formatEther(accountBalance))));\n    };\n    fetchData();\n  }, [account.address]);\n  function handleDestinationAddressChange(event) {\n    setDestinationAddress(event.target.value);\n  }\n  function handleAmountChange(event) {\n    setAmount(Number.parseFloat(event.target.value));\n  }\n  async function transfer() {\n    // Set the network response status to \"pending\"\n    setNetworkResponse({\n      status: 'pending',\n      message: ''\n    });\n    try {\n      const {\n        receipt\n      } = await sendToken(amount, account.address, destinationAddress, account.privateKey);\n      if (receipt.status === 1) {\n        // Set the network response status to \"complete\" and the message to the transaction hash\n        setNetworkResponse({\n          status: 'complete',\n          message: /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Transfer complete! \", /*#__PURE__*/_jsxDEV(\"a\", {\n              href: `${goerli.blockExplorerUrl}/tx/${receipt.transactionHash}`,\n              target: \"_blank\",\n              rel: \"noreferrer\",\n              children: \"View transaction\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 55,\n              columnNumber: 42\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 55,\n            columnNumber: 20\n          }, this)\n        });\n        return receipt;\n      } else {\n        // Transaction failed\n        console.log(`Failed to send ${receipt}`);\n        // Set the network response status to \"error\" and the message to the receipt\n        setNetworkResponse({\n          status: 'error',\n          message: JSON.stringify(receipt)\n        });\n        return {\n          receipt\n        };\n      }\n    } catch (error) {\n      // An error occurred while sending the transaction\n      console.error({\n        error\n      });\n      // Set the network response status to \"error\" and the message to the error\n      setNetworkResponse({\n        status: 'error',\n        message: error.reason || JSON.stringify(error)\n      });\n    }\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"AccountDetail container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n      children: [\"Address: \", /*#__PURE__*/_jsxDEV(\"a\", {\n        href: `https://goerli.etherscan.io/address/${account.address}`,\n        target: \"_blank\",\n        rel: \"noreferrer\",\n        children: account.address\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 22\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 17\n      }, this), \"Balance: \", balance, \" ETH\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"form-group\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"Destination Address:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        className: \"form-control\",\n        type: \"text\",\n        value: destinationAddress,\n        onChange: handleDestinationAddressChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"form-group\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"Amount:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        className: \"form-control\",\n        type: \"number\",\n        value: amount,\n        onChange: handleAmountChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"btn btn-primary\",\n      type: \"button\",\n      onClick: transfer,\n      disabled: !amount || networkResponse.status === 'pending',\n      children: [\"Send \", amount, \" ETH\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 9\n    }, this), networkResponse.status && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [networkResponse.status === 'pending' && /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Transfer is pending...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 54\n      }, this), networkResponse.status === 'complete' && /*#__PURE__*/_jsxDEV(\"p\", {\n        children: networkResponse.message\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 55\n      }, this), networkResponse.status === 'error' && /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Error occurred while transferring tokens: \", networkResponse.message]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 52\n      }, this)]\n    }, void 0, true), /*#__PURE__*/_jsxDEV(AccountTransactions, {\n      account: account\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 82,\n    columnNumber: 5\n  }, this);\n};\n_s(AccountDetail, \"aPgcBAtGPlt3Mpb2rcIAUVQVVEQ=\");\n_c = AccountDetail;\nexport default AccountDetail;\nvar _c;\n$RefreshReg$(_c, \"AccountDetail\");","map":{"version":3,"names":["React","useEffect","useState","sendToken","goerli","AccountTransactions","ethers","toFixedIfNecessary","AccountDetail","account","destinationAddress","setDestinationAddress","amount","setAmount","balance","setBalance","networkResponse","setNetworkResponse","status","message","fetchData","provider","providers","JsonRpcProvider","rpcUrl","accountBalance","getBalance","address","String","utils","formatEther","handleDestinationAddressChange","event","target","value","handleAmountChange","Number","parseFloat","transfer","receipt","privateKey","blockExplorerUrl","transactionHash","console","log","JSON","stringify","error","reason"],"sources":["/Users/fc/Downloads/Block chain/aquawallet/src/scenes/Account/AccountDetail.tsx"],"sourcesContent":["import React, {useEffect, useState} from 'react';\nimport { sendToken } from '../../utils/TransactionUtils';\nimport { goerli } from '../../models/Chain';\nimport { Account } from '../../models/Account';\nimport AccountTransactions from './AccountTransactions';\nimport { ethers } from 'ethers';\nimport { toFixedIfNecessary } from '../../utils/AccountUtils';\nimport './Account.css';\n\ninterface AccountDetailProps {\n  account: Account\n}\n\nconst AccountDetail: React.FC<AccountDetailProps> = ({account}) => {\n  const [destinationAddress, setDestinationAddress] = useState('');\n  const [amount, setAmount] = useState(0);\n  const [balance, setBalance] = useState(account.balance)\n\n  const [networkResponse, setNetworkResponse] = useState<{ status: null | 'pending' | 'complete' | 'error', message: string | React.ReactElement }>({\n    status: null,\n    message: '',\n  });\n\n  useEffect(() => {\n    const fetchData = async () => {\n        const provider = new ethers.providers.JsonRpcProvider(goerli.rpcUrl);\n        let accountBalance = await provider.getBalance(account.address);\n        setBalance((String(toFixedIfNecessary(ethers.utils.formatEther(accountBalance)))));\n    }\n    fetchData();\n}, [account.address])\n\n  function handleDestinationAddressChange(event: React.ChangeEvent<HTMLInputElement>) {\n    setDestinationAddress(event.target.value);\n  }\n\n  function handleAmountChange(event: React.ChangeEvent<HTMLInputElement>) {\n    setAmount(Number.parseFloat(event.target.value));\n  }\n\n  async function transfer() {\n    // Set the network response status to \"pending\"\n    setNetworkResponse({\n      status: 'pending',\n      message: '',\n    });\n\n    try {\n      const { receipt } = await sendToken(amount, account.address, destinationAddress, account.privateKey);\n\n      if (receipt.status === 1) {\n        // Set the network response status to \"complete\" and the message to the transaction hash\n        setNetworkResponse({\n          status: 'complete',\n          message: <p>Transfer complete! <a href={`${goerli.blockExplorerUrl}/tx/${receipt.transactionHash}`} target=\"_blank\" rel=\"noreferrer\">\n            View transaction\n            </a></p>,\n        });\n        return receipt;\n      } else {\n        // Transaction failed\n        console.log(`Failed to send ${receipt}`);\n        // Set the network response status to \"error\" and the message to the receipt\n        setNetworkResponse({\n          status: 'error',\n          message: JSON.stringify(receipt),\n        });\n        return { receipt };\n      }\n    } catch (error: any) {\n      // An error occurred while sending the transaction\n      console.error({ error });\n      // Set the network response status to \"error\" and the message to the error\n      setNetworkResponse({\n        status: 'error',\n        message: error.reason || JSON.stringify(error),\n      });\n    }\n  }\n\n  return (\n    <div className='AccountDetail container'>\n        <h4>\n            Address: <a href={`https://goerli.etherscan.io/address/${account.address}`} target=\"_blank\" rel=\"noreferrer\">\n            {account.address}\n            </a><br/>\n            Balance: {balance} ETH\n        </h4>\n\n        <div className=\"form-group\">\n            <label>Destination Address:</label>\n            <input\n            className=\"form-control\"\n            type=\"text\"\n            value={destinationAddress}\n            onChange={handleDestinationAddressChange}\n            />\n        </div>\n\n        <div className=\"form-group\">\n            <label>Amount:</label>\n            <input\n            className=\"form-control\"\n            type=\"number\"\n            value={amount}\n            onChange={handleAmountChange}\n            />\n        </div>\n\n        <button\n            className=\"btn btn-primary\"\n            type=\"button\"\n            onClick={transfer}\n            disabled={!amount || networkResponse.status === 'pending'}\n        >\n            Send {amount} ETH\n        </button>\n\n        {networkResponse.status &&\n            <>\n            {networkResponse.status === 'pending' && <p>Transfer is pending...</p>}\n            {networkResponse.status === 'complete' && <p>{networkResponse.message}</p>}\n            {networkResponse.status === 'error' && <p>Error occurred while transferring tokens: {networkResponse.message}</p>}\n            </>\n        }\n\n        <AccountTransactions account={account} />\n    </div>\n\n  )\n}\n\nexport default AccountDetail;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}